<!DOCTYPE html>
<html lang="zh-hans">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>第五人格随机玩法</title>
    <style>
        :root {
            --primary-color: #4a90e2; /* Blue */
            --secondary-color: #2c3e50; /* Dark Grey */
            --background-color: rgba(255, 255, 255, 0.85); /* Slightly more opaque white */
            --border-radius: 8px;
            --spacing-sm: 8px;
            --spacing-md: 16px;
            --spacing-lg: 24px;
            --spacing-xl: 32px;
            --survivor-color: #2ecc71; /* Green */
            --hunter-color: #e74c3c; /* Red */
        }

        body {
            min-width: 100vw;
            min-height: 100vh;
            margin: 0;
            padding: 0;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
            background: linear-gradient(
                rgba(255, 255, 255, 0.85), 
                rgba(255, 255, 255, 0.85)
            ),
            url('./assets/20240410002754.jpg') top center / cover no-repeat fixed;
            color: var(--secondary-color);
            line-height: 1.6;
        }

        .container {
            max-width: 1080px;
            margin: 0 auto;
            padding: var(--spacing-md);
        }

        h1 {
            text-align: center;
            color: var(--secondary-color);
            margin-bottom: var(--spacing-xl);
            font-size: 2.8em;
            text-shadow: 1px 1px 3px rgba(0,0,0,0.15);
            letter-spacing: 1px;
        }

        h2 {
            color: var(--secondary-color);
            margin: var(--spacing-lg) 0 var(--spacing-md);
            font-size: 1.6em;
            border-bottom: 2px solid var(--primary-color);
            padding-bottom: var(--spacing-sm);
        }

        .panel {
            background: var(--background-color);
            padding: var(--spacing-md);
            border-radius: var(--border-radius);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            margin-bottom: var(--spacing-md);
        }

        .flex-group {
            display: flex;
            gap: var(--spacing-md);
            align-items: center;
            flex-wrap: wrap;
            margin-bottom: var(--spacing-md);
        }

        .buttons {
            display: flex;
            flex-wrap: wrap;
            gap: var(--spacing-sm);
        }

        button {
            background-color: var(--primary-color);
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: var(--border-radius);
            cursor: pointer;
            font-size: 1em;
            transition: all 0.3s ease;
            outline: none;
        }

        button:hover:not(:disabled) {
            background-color: #357abd;
            transform: translateY(-1px);
        }

        button:active:not(:disabled) {
             transform: translateY(0);
        }

        button:focus-visible {
            box-shadow: 0 0 0 3px rgba(74, 144, 226, 0.5);
        }

        button:disabled {
            background-color: #cccccc;
            cursor: not-allowed;
            opacity: 0.7;
        }

        input[type="number"] {
            width: 60px;
            padding: 6px 8px;
            border: 1px solid #cccccc;
            border-radius: var(--border-radius);
            margin: 0 8px;
            outline: none;
        }

        input[type="number"]:focus-visible {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(74, 144, 226, 0.2);
        }

        input[type="checkbox"] {
            margin-right: 4px;
            transform: scale(1.1);
        }

        #currentMatch p {
            margin: var(--spacing-sm) 0;
            line-height: 1.5;
        }

        #historyMatch {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        #historyMatch li {
            background: var(--background-color);
            padding: var(--spacing-md);
            margin-bottom: var(--spacing-sm);
            border-radius: var(--border-radius);
            box-shadow: 0 2px 5px rgba(0,0,0,0.08);
            transition: transform 0.2s ease;
            word-break: break-word;
        }

        #historyMatch li:hover {
            transform: translateX(6px);
        }

        .win-buttons {
            display: flex;
            gap: var(--spacing-md);
            margin: var(--spacing-md) 0 var(--spacing-md) 0;
        }

        #survivorWin {
            background-color: var(--survivor-color);
        }

        #survivorWin:hover:not(:disabled) {
            background-color: #27ae60;
        }

        #hunterWin {
            background-color: var(--hunter-color);
        }

        #hunterWin:hover:not(:disabled) {
            background-color: #c0392b;
        }

        /* input number fix */
        input::-webkit-outer-spin-button,
        input::-webkit-inner-spin-button {
        -webkit-appearance: none;
        }
        input[type="number"] {
            -moz-appearance: textfield;
        }

        @media (max-width: 600px) {
            .container {
                padding: var(--spacing-sm);
            }

            .buttons,
            .flex-group,
            .win-buttons {
                flex-direction: column;
                gap: var(--spacing-sm);
            }

            button,
            .flex-group > div {
                width: 100%;
            }

            input[type="number"] {
                width: calc(100% - 20px); /* Adjust width for full line */
                margin: 0;
                display: block;
                box-sizing: border-box;
            }

            label[for="hunterMode"],
            label[for="allMaps"] {
                 margin-left: var(--spacing-sm);
            }

            h1 {
                font-size: 2.2em;
                margin-bottom: var(--spacing-lg);
            }

            h2 {
                font-size: 1.4em;
                margin-top: var(--spacing-md);
            }

            .panel {
                padding: var(--spacing-sm);
            }

             #historyMatch li {
                padding: var(--spacing-sm);
            }
        }

        :global(.winner-badge) {
            display: inline-block;
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 0.9em;
            color: #fff;
            margin-left: 8px;
        }
        :global(.winner-badge.survivor) { background: #2ecc71; }
        :global(.winner-badge.hunter) { background: #e74c3c; }
        :global(.winner-badge.draw) { background: #f1c40f; color: #fff; }
    </style>
</head>
<body>
    <div class="container">
        <h1>第五人格随机玩法</h1>
        <div class="panel">
            <div class="flex-group">
                <div id="normal">
                    对局人数<input id="number" type="number" placeholder="5" value="5" min="5" max="10">
                </div>
                <div>
                    <input type="checkbox" name="hunterMode" id="hunterModeButton">
                    <label for="hunterMode">联合狩猎</label>
                </div>
            </div>
            <div class="flex-group buttons">
                <div>
                    <input type="checkbox" name="allMaps" id="allMaps">
                    <label for="allMaps">包含非比赛地图</label>
                </div>
                <div>
                    <input type="checkbox" name="multiplePool" id="multiplePool">
                    <label for="multiplePool">9v3模式</label>
                </div>
                <button id="randomButton">开始新对局</button>
                <button id="revokeButton" disabled>取消本次对局</button>
                <button id="resetButton">重置</button>
            </div>
        </div>
        <h2>当前对局</h2>
        <div id="currentMatch" class="panel"></div>
        <div class="win-buttons">
            <button id="survivorWin" disabled>求生者获胜</button>
            <button id="hunterWin" disabled>监管者获胜</button>
            <button id="drawWin" disabled>平局</button>
        </div>
        <h2>历史记录</h2>
        <ul id="historyMatch"></ul>
    </div>

    <script>
        // @ts-nocheck
        // 角色池
        const survivors = ['医生', '律师', '慈善家', '园丁', '魔术师', '冒险家', '佣兵', '空军', 
            '机械师', '前锋', '盲女', '祭司', '调香师', '牛仔', '舞女', '先知', '入殓师', 
            '勘探员', '咒术师', '野人', '杂技演员', '大副', '调酒师', '邮差', '守墓人', '囚徒', 
            '昆虫学者', '画家', '击球手', '玩具商', '病患', '心理学家', '小女孩', '哭泣小丑', '教授', 
            '古董商', '作曲家', '记者', '飞行家', '拉拉队员', '木偶师', '火灾调查员', '法罗女士', '骑士', 
            '气象学家', '弓箭手', '逃脱大师', '幻灯师', /* 新角色在此插入 */ '幸运儿']
        const hunters = ['厂长', '小丑', '鹿头', '杰克', '蜘蛛', '红蝶', '黄衣之主', '宿伞之魂', '摄影师', 
        '疯眼', '梦之女巫', '爱哭鬼', '孽蜥', '红夫人', '26号守卫', '使徒', '小提琴家', '雕刻家', 
        '博士', '破轮', '渔女', '蜡像师', '噩梦', '记录员', '隐士', '守夜人', '歌剧演员', 
        '时空之影', '跛脚羊', '喧嚣', '杂货商', '台球手']
        const maps = ['军工厂', '红教堂', '圣心医院', '湖景村', '月亮河公园', '里奥的回忆', '永眠镇', '唐人街', '不归林']
        const elseMaps = ['白沙街疯人院', '闪金石窟', '克雷伯格赛马场']
        const allMaps = maps.concat(elseMaps)
        
        const hunterMaps = ['湖景村', '月亮河公园', '永眠镇', '里奥的回忆', '永眠镇大']
        // const hunterOut = ['摄影师', '梦之女巫', '博士', '记录员']
        // const newHunters = hunters.filter(item => !hunterOut.includes(item))

        const selectedHistory = []; // 存储历史记录
        const defaultItem = {
            map: '',
            hunters: [],
            survivors: [],
            hunterNumbers: [],
            survivorNumbers: [],
            winner: ''
        }
        let randomIng = false
        let hunterMode = false
        let isMultiplePool = false

        const hunterModeButton = document.querySelector('#hunterModeButton')
        const randomButton = document.querySelector('#randomButton')
        const revokeButton = document.querySelector('#revokeButton')
        const resetButton = document.querySelector('#resetButton')
        const survivorWinButton = document.querySelector('#survivorWin')
        const hunterWinButton = document.querySelector('#hunterWin')
        const drawWinButton = document.querySelector('#drawWin')
        hunterModeButton.addEventListener('click', modeChange)
        randomButton.addEventListener('click', randomOnce)
        revokeButton.addEventListener('click', revokeOnce)
        resetButton.addEventListener('click', clearHistory)
        survivorWinButton.addEventListener('click', () => setWinner('survivor'))
        hunterWinButton.addEventListener('click', () => setWinner('hunter'))
        drawWinButton.addEventListener('click', () => setWinner('draw'))
        
        renderMatch()

        function modeChange() {
            const numberInput = document.querySelector('#number')
            const allMapSelect = document.querySelector('#allMaps')
            hunterMode = allMapSelect.disabled = numberInput.disabled = hunterModeButton.checked
            clearHistory()
        }

        const multiplePoolButton = document.querySelector('#multiplePool');
        multiplePoolButton.addEventListener('click', () => {
            isMultiplePool = multiplePoolButton.checked;
            clearHistory();
        });

        function randomNumber(number) {
            return Math.floor(Math.random() * number)
        }
        function randomArray(data = []) {
            return [...data].sort((a, b) => Math.random() - 0.3)
        }
        function getRandomElements(arr, count) {
            const copy = [...arr]; // 浅拷贝原数组，避免修改原数据
            const result = [];
            const max = Math.min(count, copy.length); // 安全处理超出数组长度的情况

            // 核心洗牌逻辑
            for (let i = 0; i < max; i++) {
                // 生成随机索引：从剩余未处理部分随机选择
                const randomIndex = Math.floor(Math.random() * (copy.length - i));
                
                // 交换位置：将随机选中的元素与当前尾部元素交换
                [copy[randomIndex], copy[copy.length - 1 - i]] = 
                [copy[copy.length - 1 - i], copy[randomIndex]];
                
                // 取出交换到尾部的新元素（即被随机选中的元素）
                result.push(copy[copy.length - 1 - i]);
            }
            
            return result;
        }
        
        function randomOnce() {
            if (randomIng) return
            randomIng = randomButton.disabled = true
            selectCharacters();
            randomIng = randomButton.disabled = false
        }

        function selectCharacters() {
            // 随机麦序
            let number = +document.getElementById('number').value;
            number = hunterMode ? 10 : Math.max(number, 5);
            const seatNumbers = Array(number).fill().map((_, i) => i)
            const chooseNumbers = getRandomElements(seatNumbers, 5)
            let hunterNumbers = [], survivorNumbers = [], hunterMap = '';
            // 狩猎模式，随机两位监管，其余求生
            if (hunterMode) {
                const hunterMapIndex = randomNumber(hunterMaps.length)
                hunterNumbers = chooseNumbers.slice(0, 2)
                hunterMap = hunterMaps[hunterMapIndex]

                selectedHistory.push({
                    hunterNumbers,
                    survivorNumbers: [],
                    map: hunterMap,
                    hunters: ['自选'],
                    survivors: ['自选'],
                    winner: ''
                });
                renderMatch();
                renderHistory();
                return
            }
            let newSelectedSurvivors, newSelectedHunters, newSelectedMap
            if (isMultiplePool) {
                // 随机多位求生者、监管者
                newSelectedSurvivors = getRandomElements(survivors, 9);
                newSelectedHunters = getRandomElements(hunters, 3);
                newSelectedMap = maps[randomNumber(maps.length)];
            } else {
                // 五人模式，首位监管，其余求生
                let [hNumber, ...sNumbers] = chooseNumbers
                hunterNumbers = [hNumber]
                survivorNumbers = sNumbers
                // 随机地图
                const allMapSelect = document.getElementById('allMaps')
                const mapList = allMapSelect.checked ? allMaps : maps
                if (selectedHistory.length === mapList.length) {
                    alert('剩余地图不足，请重置后再试')
                    return
                }
                const selectedMaps = selectedHistory.map(h => h.map)
                const mapOptions = mapList.filter(map => !selectedMaps.includes(map))
                newSelectedMap = mapOptions[randomNumber(mapOptions.length)]
                // 随机选择4个求生者
                const selectedSurvivors = selectedHistory.flatMap(h => h.survivorNumbers)
                const leftSurvivors = survivors.filter(name => !selectedSurvivors.includes(name))
                if (leftSurvivors.length < 4) {
                    alert('剩余可选求生者不足，请重置后再试')
                    return
                }
                newSelectedSurvivors = getRandomElements(leftSurvivors, 4)
                // 随机选择1个监管者
                const selectedHunters = selectedHistory.flatMap(h => h.hunterNumbers)
                const leftHunters = hunters.filter(name => !selectedHunters.includes(name))
                if (leftHunters.length < 1) {
                    alert('剩余可选监管者不足，请重置后再试')
                    return
                }
                newSelectedHunters = getRandomElements(leftHunters, 1)
            }

            // 记录这次抽取结果
            selectedHistory.push({
                hunterNumbers,
                survivorNumbers,
                map: newSelectedMap,
                hunters: newSelectedHunters,
                survivors: newSelectedSurvivors,
                winner: ''
            });
            renderMatch();
            renderHistory();
        }

        function clearHistory() {
            selectedHistory.length = 0; // 清空历史记录
            renderMatch();
            renderHistory();
        }

        function revokeOnce() {
            selectedHistory.pop()
            renderMatch();
            renderHistory();
        }

        function setWinner(winner) {
            if (!selectedHistory.length) return;
            const current = selectedHistory[selectedHistory.length - 1];
            current.winner = winner;
            survivorWinButton.disabled = true;
            hunterWinButton.disabled = true;
            drawWinButton.disabled = true;
            renderHistory();
        }

        function renderMatch() {
            const current = selectedHistory.slice(-1)[0] || defaultItem;
            const currentMatch = document.getElementById('currentMatch');
            currentMatch.innerHTML = `<p>${hunterMode ? '' : `求生麦序：${current.survivorNumbers.join(' ')}`} ${`监管麦序：${current.hunterNumbers.join(' ')}`}</p>
                                <p>地图: ${current.map}</p>
                                <p>求生者: ${current.survivors.join(', ')}</p>
                                <p>监管者: ${current.hunters.join(', ')}</p>`;
            
            // Enable/disable win buttons based on whether there's a current match and if it already has a winner
            const hasCurrentMatch = selectedHistory.length > 0;
            const currentWinner = hasCurrentMatch ? selectedHistory[selectedHistory.length - 1].winner : '';
            survivorWinButton.disabled = !hasCurrentMatch || !!currentWinner;
            hunterWinButton.disabled = !hasCurrentMatch || !!currentWinner;
            drawWinButton.disabled = !hasCurrentMatch || !!currentWinner;
        }

        function renderHistory() {
            const historyList = document.getElementById('historyMatch');
            revokeButton.disabled = !selectedHistory.length;
            historyList.innerHTML = '';

            for (let i = selectedHistory.length - 1; i >= 0; i--) {
                const record = selectedHistory[i];
                let winnerText = '';
                if (record.winner === 'survivor') {
                    winnerText = ' | 获胜方：<span class="winner-badge survivor">求生者</span>';
                } else if (record.winner === 'hunter') {
                    winnerText = ' | 获胜方：<span class="winner-badge hunter">监管者</span>';
                } else if (record.winner === 'draw') {
                    winnerText = ' | <span class="winner-badge draw">平局</span>';
                }
                const listItem = document.createElement('li');
                listItem.innerHTML = `第${i + 1}局---地图: ${record.map} | 求生者: ${record.survivors.join(', ')} | 监管者: ${record.hunters.join(', ')}${winnerText}`;
                historyList.appendChild(listItem);
            }
        }
    </script>
</body>
</html>