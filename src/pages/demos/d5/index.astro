<!DOCTYPE html>
<html lang="zh-hans">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>第五人格随机玩法</title>
    <style>
        body {
            min-width: 100vw;
            min-height: 100vh;
            margin: 0;
            padding: 0;
            background: linear-gradient(
                rgba(255, 255, 255, 0.7), 
                rgba(255, 255, 255, 0.7)
            ),
            url('./assets/20240410002754.jpg') top center / cover no-repeat;
        }
        .container {
            padding: 20px;
        }
        .buttons {
            display: flex;
            * {
                margin: 4px;
            }
        }
        /* input number fix */
        input::-webkit-outer-spin-button,
        input::-webkit-inner-spin-button {
        -webkit-appearance: none;
        }
        input[type="number"] {
            -moz-appearance: textfield;
        }
        #selectedHistory li {
            padding: 10px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>第五人格随机玩法</h1>
        <div style="display: flex; gap: 10px;">
            <div id="normal">
                对局人数<input style="width: 40px" id="number" type="number" placeholder="5" value="5" min="5" max="10">
            </div>
            <div>
                <input type="checkbox" name="hunterMode" id="hunterModeButton">
                <label for="hunterMode">联合狩猎</label>
            </div>
        </div>
        <div class="buttons">
            <input type="checkbox" name="allMaps" id="allMaps">
            <label for="allMaps">包含非比赛地图</label>
            <button id="randomButton">随机地图和角色</button>
            <button id="revokeButton" disabled>取消本次随机</button>
            <button id="resetButton">重置</button>
        </div>
        <h2>当前对局:</h2>
        <div id="currentMatch"></div>
        <h2>历史记录:</h2>
        <ul id="historyMatch"></ul>
    </div>

    <script>
        // @ts-nocheck
        // 角色池
        const survivors = ['幸运儿', '医生', '律师', '慈善家', '园丁', '魔术师', '冒险家', '佣兵', '空军', 
            '机械师', '前锋', '盲女', '祭司', '调香师', '牛仔', '舞女', '先知', '入殓师', 
            '勘探员', '咒术师', '野人', '杂技演员', '大副', '调酒师', '邮差', '守墓人', '囚徒', 
            '昆虫学者', '画家', '击球手', '玩具商', '病患', '心理学家', '小女孩', '哭泣小丑', '教授', 
            '古董商', '作曲家', '记者', '飞行家', '拉拉队员', '木偶师', '火灾调查员', '法罗女士', '骑士', 
            '气象学家', '弓箭手']
        const hunters = ['厂长', '小丑', '鹿头', '杰克', '蜘蛛', '红蝶', '黄衣之主', '宿伞之魂', '摄影师', 
        '疯眼', '梦之女巫', '爱哭鬼', '孽蜥', '红夫人', '26号守卫', '使徒', '小提琴家', '雕刻家', 
        '博士', '破轮', '渔女', '蜡像师', '噩梦', '记录员', '隐士', '守夜人', '歌剧演员', 
        '时空之影', '跛脚羊', '喧嚣', '杂货商']
        const maps = ['军工厂', '红教堂', '圣心医院', '湖景村', '月亮河公园', '里奥的回忆', '永眠镇', '唐人街', '不归林']
        const elseMaps = ['白沙街疯人院', '闪金石窟', '克雷伯格赛马场']
        const allMaps = maps.concat(elseMaps)
        
        const hunterMaps = ['湖景村', '月亮河公园', '永眠镇', '里奥的回忆', '永眠镇大']
        // const hunterOut = ['摄影师', '梦之女巫', '博士', '记录员']
        // const newHunters = hunters.filter(item => !hunterOut.includes(item))

        const selectedHistory = []; // 存储历史记录
        const defaultItem = {
            map: '',
            hunter: '',
            survivors: [],
            hunterNumbers: [],
            survivorNumbers: []
        }
        let randomIng = false
        let hunterMode = false

        const hunterModeButton = document.querySelector('#hunterModeButton')
        const randomButton = document.querySelector('#randomButton')
        const revokeButton = document.querySelector('#revokeButton')
        const resetButton = document.querySelector('#resetButton')
        hunterModeButton.addEventListener('click', modeChange)
        randomButton.addEventListener('click', randomOnce)
        revokeButton.addEventListener('click', revokeOnce)
        resetButton.addEventListener('click', clearHistory)
        
        renderMatch()

        function modeChange() {
            const numberInput = document.querySelector('#number')
            const allMapSelect = document.querySelector('#allMaps')
            hunterMode = allMapSelect.disabled = numberInput.disabled = hunterModeButton.checked
            clearHistory()
        }

        function randomNumber(number) {
            return Math.floor(Math.random() * number)
        }
        function randomArray(data = []) {
            return [...data].sort((a, b) => Math.random() - 0.3)
        }
        function getRandomElements(arr, count) {
            const copy = [...arr]; // 浅拷贝原数组，避免修改原数据
            const result = [];
            const max = Math.min(count, copy.length); // 安全处理超出数组长度的情况

            // 核心洗牌逻辑
            for (let i = 0; i < max; i++) {
                // 生成随机索引：从剩余未处理部分随机选择
                const randomIndex = Math.floor(Math.random() * (copy.length - i));
                
                // 交换位置：将随机选中的元素与当前尾部元素交换
                [copy[randomIndex], copy[copy.length - 1 - i]] = 
                [copy[copy.length - 1 - i], copy[randomIndex]];
                
                // 取出交换到尾部的新元素（即被随机选中的元素）
                result.push(copy[copy.length - 1 - i]);
            }
            
            return result;
        }
        
        function randomOnce() {
            if (randomIng) return
            randomIng = randomButton.disabled = true
            selectCharacters();
            randomIng = randomButton.disabled = false
        }

        function selectCharacters() {
            // 随机麦序
            let number = +document.getElementById('number').value;
            number = hunterMode ? 10 : Math.max(number, 5);
            const seatNumbers = Array(number).fill().map((_, i) => i)
            const chooseNumbers = getRandomElements(seatNumbers, 5)
            let hunterNumbers, survivorNumbers, hunterMap = ''
            // 狩猎模式，随机两位监管，其余求生
            if (hunterMode) {
                const hunterMapIndex = randomNumber(hunterMaps.length)
                hunterNumbers = chooseNumbers.slice(0, 2)
                hunterMap = hunterMaps[hunterMapIndex]

                selectedHistory.push({
                    hunterNumbers,
                    survivorNumbers: [],
                    map: hunterMap,
                    hunter: '自选',
                    survivors: ['自选'],
                });
                renderMatch();
                renderHistory();
                return
            }
            // 五人模式，首位监管，其余求生
            let [hNumber, ...sNumbers] = chooseNumbers
            hunterNumbers = [hNumber]
            survivorNumbers = sNumbers
            // 随机地图
            const allMapSelect = document.getElementById('allMaps')
            const mapList = allMapSelect.checked ? allMaps : maps
            if (selectedHistory.length === mapList.length) {
                alert('剩余地图不足，请重置后再试')
                return
            }
            const selectedMaps = selectedHistory.map(h => h.map)
            const mapOptions = mapList.filter(map => !selectedMaps.includes(map))
            const mapIndex = randomNumber(mapOptions.length)
            const newSelectedMap = mapOptions[mapIndex]
            // 随机选择4个求生者
            const selectedSurvivors = selectedHistory.flatMap(h => h.survivorNumbers)
            const leftSurvivors = survivors.filter(name => !selectedSurvivors.includes(name))
            if (leftSurvivors.length < 4) {
                alert('剩余可选求生者不足，请重置后再试')
                return
            }
            const newSelectedSurvivors = getRandomElements(leftSurvivors, 4)
            // 随机选择1个监管者
            const selectedHunters = selectedHistory.flatMap(h => h.hunterNumbers)
            const leftHunters = hunters.filter(name => !selectedHunters.includes(name))
            if (leftHunters.length < 1) {
                alert('剩余可选监管者不足，请重置后再试')
                return
            }
            const hunterIndex = randomNumber(leftHunters.length);
            const newSelectedHunter = leftHunters[hunterIndex];

            // 记录这次抽取结果
            selectedHistory.push({
                hunterNumbers,
                survivorNumbers,
                map: newSelectedMap,
                hunter: newSelectedHunter,
                survivors: newSelectedSurvivors,
            });
            renderMatch();
            renderHistory();
        }

        function clearHistory() {
            selectedHistory.length = 0; // 清空历史记录
            renderMatch();
            renderHistory();
        }

        function revokeOnce() {
            selectedHistory.pop()
            renderMatch();
            renderHistory();
        }

        function renderMatch() {
            const current = selectedHistory.slice(-1)[0] || defaultItem;
            const currentMatch = document.getElementById('currentMatch');
            currentMatch.innerHTML = `<p>${hunterMode ? '' : `求生麦序：${current.survivorNumbers.join(' ')}`} ${`监管麦序：${current.hunterNumbers.join(' ')}`}</p>
                                <p>地图: ${current.map}</p>
                                <p>求生者: ${current.survivors.join(', ')}</p>
                                <p>监管者: ${current.hunter}</p>`;
        }

        function renderHistory() {
            const historyList = document.getElementById('historyMatch');
            revokeButton.disabled = !selectedHistory.length;
            historyList.innerHTML = '';

            for (let i = selectedHistory.length - 1; i >= 0; i--) {
                const record = selectedHistory[i];
                const listItem = document.createElement('li');
                listItem.textContent = `第${i + 1}局---地图: ${record.map} | 求生者: ${record.survivors.join(', ')} | 监管者: ${record.hunter}`;
                historyList.appendChild(listItem);
            }
        }
    </script>
</body>
</html>